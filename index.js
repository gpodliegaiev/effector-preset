const { renderSchema } = require('./lib/contracts');

const METHOD = `
/*
{{DATA}}
*/

const T{{TYPE_NAME}}Body = {{BODY_TYPE}}
export type {{TYPE_NAME}}Body = typed.Get<typeof {{BODY_TYPE}}>;

const T{{TYPE_NAME}}Done = {{CONTRACT_DONE}};
export type {{TYPE_NAME}}Done = typed.Get<typeof T{{TYPE_NAME}}Done>;

const T{{TYPE_NAME}}Fail = {{CONTRACT_FAIL}};
export type {{TYPE_NAME}}Fail = typed.Get<typeof T{{TYPE_NAME}}Fail>;

/** {{METHOD_DESCRIPTION}} */
export const {{METHOD_NAME}}Fx = createEffect<{{TYPE_NAME}}, {{TYPE_NAME}}Done, {{TYPE_NAME}}Fail>({
  async handler(params) {
    const result = await requestFx({
      method: "{{HTTP_METHOD}}",
      path: "{{HTTP_URL}}",
      body: params,
    });
    return result.body as {{TYPE_NAME}}Done;
  }
});
`;

module.exports = {
  importRequest: 'disabled',
  disableTypesGenerate: true,

  templateFileNameCode: ({ swaggerData, changeCase }) =>
    `${changeCase.paramCase(swaggerData.info.title)}.ts`,

  templateCodeBefore: ({ swaggerData }) =>
    [
      `// ${swaggerData.info.title} ${swaggerData.info.version}`,
      `// --- `,
      `// This file is automatically generated by swagger-to-js with preset @sergeysova/swagger-to-js-preset`,
      `// Do not edit this file directly. Instead open swagger-to-js config file and follow the link in "file"`,
      '',
      `import { createEffect } from 'effector-root';`,
      `import * as typed from 'typed-contracts`,
      `import { requestFx } from './request';`,
      ``,
      `const custom = { any: (valueName: string, value: mixed): any => value }`,
      ``,
      ``,
    ].join('\n'),

  templateRequestCode: (
    { name, method, url },
    { requestSwaggerData, changeCase },
  ) =>
    METHOD.trim()
      .replace(/{{METHOD_DESCRIPTION}}/g, requestSwaggerData.description)
      .replace(/{{METHOD_NAME}}/g, changeCase.camelCase(name))
      .replace(/{{TYPE_NAME}}/g, changeCase.pascalCase(name))
      .replace(/{{HTTP_METHOD}}/g, changeCase.constantCase(method))
      .replace(/{{HTTP_URL}}/g, url)
      .replace(/{{DATA}}/g, JSON.stringify(requestSwaggerData, null, 2))
      .replace(
        /{{BODY_TYPE}}/g,
        mapRequestBody(requestSwaggerData, (schema) =>
          renderSchema(schema).join('\n'),
        ),
      ),
};

function mapRequestBody(request, fn) {
  if (request.requestBody && request.requestBody.content) {
    return fn(request.requestBody.content['application/json'].schema);
  }
  return '';
}
