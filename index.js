const { compileTemplate } = require('./src/template');
const { renderProgram, createEffect } = require('./src');

const BEFORE = `
// {{TITLE}} {{VERSION}}
// ---
// This file is automatically generated by openapi with preset effector-openapi-preset
// Do not edit this file directly. Instead open openapi config file and follow the link in "file"
import { createEffect } from 'effector-root';
import * as typed from 'typed-contracts';
import { requestFx } from './request';

//#region prebuilt code
const custom = { any: (valueName: string, value: unknown): any => value }

export type GenericErrors =
  | {
      status: 'unexpected';
      error: Error;
    }
  | {
      status: 'unknown_status';
      error: { status: number; body: unknown };
    }
  | {
      status: 'validation_error';
      error: typed.ValidationError;
    };

function parseWith<T>(
  name: string,
  contract: typed.Contract<T>,
  value: unknown,
): T {
  const parsed = contract(name, value);
  if (parsed instanceof typed.ValidationError) {
    throw { status: 'validation_error', error: parsed };
  }
  return parsed;
}

//#endregion prebuilt code
`.trim();

const METHOD = `
/* --- */
//#region {{METHOD_NAME}}
{{METHOD_CONTENT}}
//#endregion {{METHOD_NAME}}
`.trim();

module.exports = {
  importRequest: 'disabled',
  disableTypesGenerate: true,

  templateFileNameCode: ({ swaggerData, changeCase }) =>
    `${changeCase.paramCase(swaggerData.info.title)}.ts`,

  templateCodeBefore: ({ swaggerData }) =>
    compileTemplate(BEFORE, {
      TITLE: swaggerData.info.title,
      VERSION: swaggerData.info.version,
    }),

  templateRequestCode: (
    { name, method, url },
    { requestSwaggerData, changeCase },
  ) =>
    compileTemplate(METHOD, {
      METHOD_NAME: changeCase.camelCase(name),
      METHOD_CONTENT: renderProgram(
        createEffect({ name, path: url, method }, requestSwaggerData),
      ),
    }),
};
